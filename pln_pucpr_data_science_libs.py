# -*- coding: utf-8 -*-
"""PLN-PUCPR_Data Science libs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jdamRnhfh5A-Z7cVqHSHIDDEW-Gn0wEy

#Google Colab + Python + Data Science libs
## Processamento de Linguagem Natural
Nesta atividade você entrará em contato com o ambiente de desenvolvimento completo desta disciplina (e que serão utilizadas também no decorrer do curso), que envolve o Google Colab, a linguagem de programação Python e as bibliotecas de Data Science.

## **Ambiente de desenvolvimento de Data Science/PLN**

A comunidade do Python mantém disponível dezenas de ferramentas para auxílio ao desenvolvedor de PLN/Data Science, entre elas:
*   **Numpy** - Biblioteca com várias funcionalidades numéricas/matemáticas (não incluído no material de hoje)
*   **Pandas** - Biblioteca para manipulação de dados usando dataframes
*   **Scikit-learn** - Biblioteca com funcionalidades de Machine Leaning, data mining e data analysis  (não incluído no material de hoje)
*   **Matplotlib, Seaborn** - Bibliotecas para produção de gráficos e outras visualizações
*   **Jupyter Notebook/Google Colab** - Interface/ambiente de notebook para desenvolvimento e documentação de projetos

## Configurando o ambiente - Checando dependências
"""

# Commented out IPython magic to ensure Python compatibility.
# Importa bibliotecas necessárias - Geralmente é a primeira célula de código do seu notebook
import pandas as pd
from matplotlib import pyplot as plt
import matplotlib as mplot
import seaborn as sns
# %matplotlib inline

"""## Google Colab/Jupyter - Atalhos e conveniências"""

# Teclas de atalho

# EXECUTAR CÉLULA: shift + enter
# INSERE CELULA ACIMA: Ctrl + m + a
# INSERE CELULA ABAIXO: Ctrl + m + b
# COMENTAR CÓDIGO: Ctrl + /

# Obtém ajuda sobre função (abre ajuda em janela ao lado)
pd.read_csv??

# Exemplo de mensagem de erro
print(nlp)

"""### Acessar arquivos no Google Colab
A seguir algumas maneiras diferentes de importar arquivos para dentro do ambiente Google Colab. Escolha uma delas para importar os arquivos disponíveis [neste repositório](https://github.com/kunkaweb/articles-data).

#### 1) via Google Drive
"""

# Acesso a URL que aparecer, e copie o código de autorização abaixo - assim o Google Colab terá permissão para ler arquivos do seu Google Drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Mostra listagem de arquivos na pasta raiz do Google Drive
# !ls "/content/drive/My Drive"

# Uma vez executada a etapa acima, sempre que referenciar um arquivo do Drive, deve colocar :
#path = "/content/drive/My Drive/CAMINHO/ATE/O/ARQUIVO/DESEJADO/"

# Exemplo - Ler o arquivo teste.txt que se encontra na pasta raiz do Google Drive
f = open("/content/drive/MyDrive/teste-pln.txt", "r")
print(f.read())

"""#### 2) Via botão de UPLOAD
Neste caso, basta ir até o painel esquerdo do Google Colab, acessar a aba FILES e apertar o botão UPLOAD. Você selecionará o arquivo desejado, que será enviado para uso na instância atual do Google Colab.

**IMPORTANTE**: O arquivo será automaticamente apagado a cada reinício de sua instância do Google Colab.

#### 3) Via github
"""

import os
# Verifica se o arquivo já existe na instância atual.  Se não, faz download do github
if not os.path.exists('articles-data/artigo_1.txt'):
    print("Diretório ainda não existe!")
    print("Obtendo dados do github...")

    !git clone https://github.com/kunkaweb/articles-data.git

print('O diretório baixado contém:\n',os.listdir('articles-data'))

"""> **IMPORTANTE:** Você deve ficar atento com as mensagens de erro do Python, pois constantemente você precisará compreendê-las para corrigir o problema


![Python - Fluxograma de erros](https://docs.google.com/uc?export=download&id=1OsOcyHMzKIEWs1rLPdShTTn_Td-mQHjo)

## Pandas Dataframes
Pandas é um dos pacotes mais importantes de Data Science no Python. A biblioteca permite que você manipule dados de maneira semelhante a uma planilha do Excel, com dados dispostos em linhas e colunas.

**Propósito**
*   Limpar
*   Transformar
*   Analisar

**Exemplos de uso**:
*   *Calcular estatísticas e responder perguntas sobre os dados* -
Qual a média, mediana, valor máximo e mínimo de cada coluna?
Coluna A se correlaciona com a coluna B?
Como é a distribuição dos dados na coluna C?
*   *Limpar os dados* - remover valores ausentes, filtrar linhas ou colunas utilizando critérios específicos
*   *Visualizar os dados com a ajuda do Matplotlib* - Desenhar gráficos de barras, linhas, histogramas, etc.
*   *Exportar dados limpos e tranformados para arquivos (e.g., csv) ou bancos de dados*.

![Pandas - Componentes principais](https://docs.google.com/uc?export=download&id=1tdCaB202YRxSVir-5QNAtra0CpY3esWK)

`DataFrames` e `Series` são muito semelhantes, pois muitas operações podem ser feitas com uma ou com a outra (e.g., preencher valores nulos, calcular a média)

### Pandas - **Exemplo prático 1**
Uma quitanda de frutas vende maçãs e laranjas. Precisamos de uma coluna para cada fruta e uma linha para cada compra do cliente.

#### **Possibilidade 1** - Criar `DataFrame` a partir de `Series`
"""

# Importa a biblioteca pandas - Deve ser chamada uma única vez durante todo notebook/script
import pandas as pd

# Cria duas séries
s1 = pd.Series([3, 2, 0, 1], name='macas', dtype=int)
s2 = pd.Series([0, 3, 7, 2], name='laranjas', dtype=int)

# Cria um DataFrame a partir das Séries
# axis=1 interpreta cada série como uma coluna.  axis=2 cada série seria uma linha.
comprasDf = pd.concat([s1,s2],axis=1)

# Mostra o DataFrame
display(comprasDf)

"""#### **Possibilidade 2** - Criar `DataFrame` a partir de um `dict`"""

# Cria um dicionário em Python
dados = {
	'macas': 		[3, 2, 0, 1],
	'laranjas':	[0, 3, 7, 2]
}

# Cria um DataFrame a partir do dicionário
comprasDf = pd.DataFrame(dados)

# Mostra o DataFrame
display(comprasDf)

"""![Pandas - DataFrame](https://docs.google.com/uc?export=download&id=1kbdy0HzfDg2BWoQKL9-xZS8NFAM9QDpy)

#### Alterando os índices do `DataFrame`
"""

# Substitui índices numéricos criados automaticamente pela lista de nomes de clientes
comprasDf = pd.DataFrame(dados, index=['Lucas', 'Paulo', 'Ana', 'Maria'])

# Mostra o DataFrame
display(comprasDf)

"""#### Coletando informações gerais sobre o `DataFrame`"""

#Linhas x Colunas
comprasDf.shape

#Índices/linhas
comprasDf.index

#Colunas
comprasDf.columns

#Quantidade de itens por coluna
comprasDf.count()

"""#### Localizando itens pelo índice

"""

# Obtém pedido do cliente Lucas
comprasDf.loc["Lucas"]

"""#### Contando elementos em um `DataFrame` ou `Series`"""

# Conta quantidade de índices (clientes) no DataFrame
print(len(comprasDf))
# Conta quantidade de itens na Serie criada nas celulas anteriores
print(len(s1))

"""#### Aplicando funções matemáticas a um `DataFrame` ou `Series`

"""

# Calcula média dos valores de pedido do cliente Paulo
comprasDf.loc["Paulo"].mean()

#Somatório das vendas de laranja (i.e., série criada nas celulas anteriores)
s2.sum()

#Maior valor para cada coluna
comprasDf.max()

#Menor valor para cada coluna
comprasDf.min()

#Resumo estatístico do DataFrame
comprasDf.describe()

#Valores médios para cada coluna
comprasDf.mean()

#Medianas para cada coluna
comprasDf.median()

"""#### Exportar dados de `DataFrames` para arquivos"""

# Exporta para arquivo CSV - compatível com Microsoft Excel
comprasDf.to_csv('compras.csv')

# Exporta para arquivo JSON
comprasDf.to_csv('compras.json')

"""#### Importar dados de arquivos para `DataFrames`"""

# Importa de arquivo CSV
csvDf = pd.read_csv('compras.csv')
display(csvDf)

# Importa de arquivo CSV - CSVs não têm índices como os DataFrames, então devemos designar o index_col ao ler
csvDf = pd.read_csv('compras.csv', index_col=0)
display(csvDf)

"""### Pandas - **Exemplo prático 2**
Será utilizada a base de dados do IMDB, um dos maiores repositórios de informações sobre filmes existentes. Esta base contém dados de 1.000 filmes entre 2006 e 2016.
A ideia é utilizar as funcionalidades do Pandas e das demais bibliotecas de visualização para analisar os dados.
"""

# Efetua download das databases necessárias
import os
# Verifica se o arquivo já existe na instância atual.  Se não, faz download do github
if not os.path.exists('nlp-class-resources/imdb-data/IMDB-Movie-Data.csv'):
    print("Diretório ainda não existe!")
    print("Obtendo dados do github...")

    !git clone https://github.com/kunkaweb/nlp-class-resources.git

print('O diretório baixado contém:\n',os.listdir('nlp-class-resources/imdb-data'))

# Importa arquivo CSV para um DataFrame
# Carrega esse conjunto de dados de um CSV e designa os títulos dos filmes como índice
movies_df = pd.read_csv("nlp-class-resources/imdb-data/IMDB-Movie-Data.csv", index_col="Title")

"""#### Referência visual da base de dados"""

# Mostra as 5 primeiras linhas
movies_df.head()

# Mostra as 5 ultimas linhas
movies_df.tail()

"""#### Alterando nome de colunas"""

# Mostra os nomes atuais
movies_df.columns

movies_df.rename(columns={
  'Runtime (Minutes)': 'Runtime',
  'Revenue (Millions)': 'Revenue_millions'
}, inplace=True)

movies_df.columns

"""#### Verificação e tratamento de dados nulos
Como lidar com valores nulos (não-existentes)?

1.   Apagar linhas ou colunas com valores nulos
2.   Substituir valores nulos por não-nulos


"""

# Mostra quais células do DataFrame são nulas
# Observe que isnull() retorna um DataFrame em que cada célula é True ou False, dependendo do status da célula
movies_df.isnull()

# Conta o número de nulos em cada coluna
movies_df.isnull().sum()

"""##### Opção 1 - Removendo nulos"""

# Cria um novo DataFrame sem as linhas que contém valores nulos
new_df = movies_df.dropna()
new_df.shape

# Perceba que o DataFrame original não é alterado
movies_df.shape

# Neste caso, as colunas que contiverem valores nulos serão descartadas
new_df = movies_df.dropna(axis=1)
new_df.shape

"""##### Opção 2 - Substituição de nulos"""

# Extrai a coluna "revenue_millions" - teremos uma Series na variável revenue
revenue = movies_df['Revenue_millions']
revenue.head()

# Obtém a média de revenue
revenue_mean = revenue.mean()
revenue_mean

# A função fillna preencherá todos valores nulos com a valor da média que calculamos
# A parâmetro inplace=True define que as alterações também serão feitas no DataFrame original de onde tiramos esta Series
revenue.fillna(revenue_mean, inplace=True)

# Não há mais valores nulos na coluna Revenue_millions
movies_df.isnull().sum()

"""#### Para entender os dados"""

# Resumo de distribuição do DataFrame
movies_df.describe()

# Resumo da coluna genre
# Mostra que a coluna de gênero tem 207 valores únicos, o valor mais alto é “Ação/ Aventura/Ficção Científica”, que aparece 50 vezes (frequência)
movies_df['Genre'].describe()

# Mostra a frequência de todos valores
movies_df['Genre'].value_counts().head(10)

# Mostra o índice de correlação entre colunas
movies_df.corr()

"""*   As tabelas de correlação são uma representação numérica dos relacionamentos entre duas variáveis no dataset
*   A amplitude do índice de correlação é de -1 até +1
*   Números positivos indicam uma correlação positiva e números negativos representam uma correlação negativa. Quando o índice = 1.0 indica uma correlação perfeita
*  Observando o resultado,  vê-se que a correlação entre “votes” e “revenue_millions” é de 0.6

#### Extração de colunas do DataFrame
"""

subset = movies_df[['Genre', 'Rating']]
subset.head()

"""#### Extração de linhas do DataFrame

"""

# Localiza pelo índice principal (nesse caso, o título)
prom = movies_df.loc["Prometheus"]
prom

#Localiza pelo índice numérico
prom = movies_df.iloc[1]
prom

# Obtém todas as linhas de Prometheus até Sing
movie_subset = movies_df.loc['Prometheus':'Sing']
movie_subset

# Faz a mesma coisa, com o índice numérico
movie_subset = movies_df.iloc[1:4]
movie_subset

"""#### Seleção de dados condicionalmente"""

# Serão atribuídos True nas Series retornada, para todos os filmes dirigidos por Ridley Scott
condition = (movies_df['Director'] == "Ridley Scott")
condition.head()

# Filtra os filmes NÃO dirigidos pelo diretor
movies_df[movies_df['Director'] != "Ridley Scott"]

# Filtra filmes com nota maior que 8.8
movies_df[movies_df['Rating'] >= 8.8]

# Filmes dirigidos por Christopher Nolan ou Ridley Scott
movies_df[(movies_df['Director'] == 'Christopher Nolan') | (movies_df['Director'] == 'Ridley Scott')]

# Filtrar todos os filmes lançados entre 2005 e 2010, com classificação acima de 8.0, receita abaixo do 25º percentil
movies_df[ ((movies_df['Year'] >= 2005) & (movies_df['Year'] <= 2010))
& (movies_df['Rating'] > 8.0)
& (movies_df['Revenue_millions'] < movies_df['Revenue_millions'].quantile(0.25))
]

"""#### Aplicação de funções no DataFrame"""

def rating_function(x):
  if x >= 8.0:
    return "bom"
  else:
    return "ruim"

# Método passa todos os valores da coluna de “rating” pela “rating_function”
movies_df["Rating_category"] = movies_df["Rating"].apply(rating_function)
movies_df.head()

"""#### Ordenação de dados"""

# Ordena pelo revenue de maneira descendente
print(movies_df['Revenue_millions'].sort_values(ascending=False).head(20))

# Obtém os filmes mais curtos
movies_df.sort_values('Runtime').head()

"""## Matplotlib & Seaborn - Plotagem de gráficos
Continuaremos a trabalhar com os dados do IMDB, porém agora pensando em como plotar gráficos. As duas bibliotecas tem funções bem similares, fica a seu critério decidir qual usar.

*   Quando usarmos a variável "plt" --> matplotlib
*   Quando usarmos a variável "sns" --> seaborn

Dicas:

*   Dica 1: Para variáveis nominais (categorias), use Bar Charts e Boxplots
*   Dica 2: Para variáveis contínuas, utilize Histogramas, Scatterplots, gráficos de linhas e boxplots



"""

# Importa biblioteca matplotlib
import matplotlib.pyplot as plt
# Atualiza tamanho padrão dos gráficos
plt.rcParams.update({'font.size': 20, 'figure.figsize': (10, 8)})

# Relação entre Revenue_millions e Rating
movies_df.plot(kind='scatter', x='Rating', y='Revenue_millions', title='Revenue (millions) vs Rating');

# Histograma de uma única coluna
movies_df['Rating'].plot(kind='hist', title='Rating');

# Histograma usando Seaborn
sns.countplot(x='Year', data=movies_df)
plt.title('Year')
plt.show()

# Histograma de duração - bins define a quantidade de intervalos que se deseja mostrar
movies_df.Runtime.plot(kind='hist', bins=20)

# Gráfico mostra quantos filmes estão em cada gênero - Top 10
movies_df.Genre.value_counts().head(10).plot(kind='bar', title='Top 10 Movies Genres')
plt.xlabel('Genre')
plt.ylabel('Number of Movies')

# Ganhos de Ridley Scott durante os anos
movies_df[movies_df['Director'] == "Ridley Scott"].sort_values("Year").plot(kind='line',x='Year',y='Revenue_millions',style='.-')

"""![Quartis](https://docs.google.com/uc?export=download&id=1FxT3JZPo2cYEWuXNHd8u8wFqkoAB2CLn)"""

movies_df['Rating'].plot(kind="box");

"""## **ATIVIDADE PRÁTICA**
Utilizaremos dados de pacientes fictícios de um hospital. O objetivo é fixar os conceitos desenvolvidos durante a aula e se ambientar com o uso do Google Colab e ferramentas que utilizaremos no decorrer da disciplina.

### 1) Obtenha a base de dados do link abaixo e deixe-a disponível no Google Colab (via github, botão de upload ou google drive)
https://github.com/kunkaweb/nlp-class-resources/blob/master/hospital-data/patients.csv
"""

# # Efetua download das databases necessárias
df = open("/content/nlp-class-resources/hospital-data/patients.csv", "r")
print(df.read())

"""### 2) Abra o arquivo CSV e carregue-o em um `DataFrame` do pandas"""

# Carrega esse conjunto de dados de um CSV para DataFrame
novo_df = pd.read_csv("nlp-class-resources/hospital-data/patients.csv")

"""###3) Qual o tamanho da base de dados? (Quantidade de linhas e colunas)"""

# Mostra o tamanho do DataFrame
novo_df.info()

"""###4) Mostre a quantidade de pacientes por gênero e depois plote um histograma"""

# Mostrar quantidade de pacientes por gênero de novo_df

gender_counts = novo_df['gender'].value_counts()
print(gender_counts)

# Plota histograma de gender_counts

import matplotlib.pyplot as plt
gender_counts.plot(kind='bar')
plt.xlabel('GÊNERO')
plt.ylabel('Número de pacientes')
plt.title('Pacientes por gênero')
plt.show()

"""### 5) Crie uma nova coluna no `DataFrame` que diga se o paciente é "nativo" ou "estrageiro" - caso `ethnicity` seja igual a "american" ele é nativo."""

# Criada coluna no dataframe para paciente "nativo" ou "estrageiro", caso ethnicity seja igual a "american" ele é nativo

novo_df['nativity'] = novo_df['ethnicity'].apply(lambda x: 'nativo' if x == 'american' else 'estrageiro')
novo_df

"""### 6) Mostre quantos pacientes de cada raça existem. Depois plote isso em um gráfico de barras."""

# Mostra quantidade de pacientes por raça, excluindo a coluna native

race_counts = novo_df['race'].value_counts()
print(race_counts)

# Plota histograma de race_counts
race_counts.plot(kind='bar')
plt.xlabel('RAÇA')
plt.ylabel('Número de pacientes')
plt.title('Pacientes por raça')
plt.show()

"""### 7) Mostre a quantidade de valores nulos para cada coluna."""

# Mostra quantidade de valores nulos para colunas de novo_df

print(novo_df.isnull().sum())

"""### 8) Qual a etnia (`ethnicity`) que mais teve diagnóstico de uso de opióides?
O paciente fez uso de opióide caso a coluna `prior_opioid_abuse_diag` tenha valor igual a 1.
"""

# Mostra etnia que mais teve diagnóstico de uso de opióides, considera valor 1 na coluna priot_opioid_abuse_diag

opioid_abuse_by_ethnicity = novo_df.groupby('ethnicity')['prior_opioid_abuse_diag'].sum()
most_common_ethnicity = opioid_abuse_by_ethnicity.sort_values(ascending=False).index[0]
print(f"A etnia com mais diagnósticos de uso de opióides é: {most_common_ethnicity}")

# Mostra quantidade de dados nulos de novo_df

print(novo_df.isnull().sum())

# Mostra somente colunas com dados numéricos em novo_df
# Seleciona somente colunas numéricas
numeric_columns = novo_df.select_dtypes(include=['int64', 'float64'])

# Mostra as colunas numéricas
print(numeric_columns.columns)

"""### 9) Mostre o índice de correlação entre as colunas"""

# Mostra o índice de correlação entre cada coluna com valor numérico de novo_df

corr_matrix = novo_df.corr()
print(corr_matrix)

"""### 10) Remova as colunas: 'maiden','passport','drivers','prefix','suffix','ssn','first','last'"""

# Remove colunas 'maiden','passport','drivers','prefix','suffix','ssn','first','last' de novo_df

novo_df = novo_df.drop(columns=['maiden','passport','drivers','prefix','suffix','ssn','first','last'])
novo_df

# Mostra nomes das colunas de novo_df

print(novo_df.columns)

"""### 11) Altere o nome das colunas restantes para português"""

# prompt: Altera nomes das colunas restantes para idioma português em novo_df

novo_df.columns = ['pat_id','data_nascimento', 'data_morte','estado_civil', 'raça', 'etnia', 'gênero', 'local_nascimento', 'endereço', 'uso_opióide', 'nativo']
novo_df

"""### 12) Exporte um arquivo CSV com as alterações feitas"""

# Exporta arquivo CSV com alterações feitas em novo_df

novo_df.to_csv('novo_df_alterado.csv')

"""## Referências & Material complementar


*   [28 useful pandas functions](https://paulovasconcellos.com.br/28-useful-pandas-functions-you-might-not-know-de42c59db085)
*   [Seus primeiros passos como Data Scientist: Introdução ao Pandas!](https://medium.com/data-hackers/uma-introdu%C3%A7%C3%A3o-simples-ao-pandas-1e15eea37fa1)
*   [Python Pandas Tutorial: A Complete Introduction for Beginners](https://www.learndatasci.com/tutorials/python-pandas-tutorial-complete-introduction-for-beginners/)
*   [Python Numpy Tutorial (with Jupyter and Colab)](https://cs231n.github.io/python-numpy-tutorial/)
*   [7 pandas functions that I use the most](https://towardsdatascience.com/7-pandas-functions-that-i-use-the-most-b83ddbaf53bf)

Este notebook foi produzido por Prof. [Lucas Oliveira](http://lattes.cnpq.br/3611246009892500) e revisado por Carla Silveira.
"""